{
  "permissions": {
    "allow": [
      "Bash(awk:*)",
      "Bash(xargs:*)",
      "Bash(for:*)",
      "Bash(done)",
      "Bash(do echo \"=== File: $file ===\")",
      "Bash(pwsh:*)",
      "Bash(cat:*)",
      "Bash(git add:*)",
      "Bash(git commit -m \"$(cat <<''EOF''\nfeat: add pink color (#e91e63) to UI Designer agent\n\nAdd creative pink color to represent design and user experience focus.\n\nðŸ¤– Generated with [Claude Code](https://claude.com/claude-code)\n\nCo-Authored-By: Claude <noreply@anthropic.com>\nEOF\n)\")",
      "Bash(git commit -m \"$(cat <<''EOF''\nfeat: add green color (#2ecc71) to Senior Backend Engineer agent\n\nAdd vibrant green color to represent Java/Spring ecosystem and backend development.\n\nðŸ¤– Generated with [Claude Code](https://claude.com/claude-code)\n\nCo-Authored-By: Claude <noreply@anthropic.com>\nEOF\n)\")",
      "Bash(git commit -m \"$(cat <<''EOF''\nfeat: add dark gray color (#34495e) to Solution Architect agent\n\nAdd professional dark gray to represent enterprise architecture and structural integrity.\n\nðŸ¤– Generated with [Claude Code](https://claude.com/claude-code)\n\nCo-Authored-By: Claude <noreply@anthropic.com>\nEOF\n)\")",
      "Bash(git commit:*)",
      "Bash(git push:*)",
      "Bash(flutter pub:*)",
      "Bash(dart run build_runner build:*)",
      "Bash(do echo \"=== $task ===\")",
      "Bash(docker-compose build:*)",
      "Bash(docker-compose up:*)",
      "Bash(curl:*)",
      "Bash(docker logs:*)",
      "Bash(docker-compose stop:*)",
      "Bash(docker-compose rm:*)",
      "Bash(flutter build:*)",
      "Bash(docker exec:*)",
      "Bash(docker inspect:*)",
      "Bash(docker-compose ps:*)",
      "Bash(dir)",
      "Bash(dir:*)",
      "Bash(chmod:*)",
      "Bash(./.claude/tools/log:*)",
      "Bash(flutter:*)",
      "Bash(docker stop:*)",
      "Bash(docker rm:*)",
      "Bash(./.claude/tools/check-compliance:*)",
      "Bash(python:*)",
      "Bash(find:*)",
      "Bash(git mv:*)",
      "Bash(mkdir:*)",
      "Bash(tree:*)",
      "Bash(powershell:*)",
      "Bash(dart analyze:*)",
      "Bash(do if [ -f \"$file\" ])",
      "Bash(then echo \"=== $file ===\")",
      "Bash(fi)",
      "Bash(git log:*)",
      "Bash(netstat:*)",
      "Bash(findstr:*)",
      "Bash(taskkill:*)",
      "Bash(cmd /c:*)",
      "Bash(./mvnw:*)",
      "Bash(mvnw.cmd test-compile:*)",
      "Bash(timeout 30 bash -c 'until docker exec chain-backend wget -q --spider http://localhost:8080/api/v1/actuator/health; do sleep 2; done')",
      "Bash(timeout:*)",
      "Bash(docker ps:*)",
      "Bash(./.claude/tools/orchestrator-log:*)",
      "Bash(do wc:*)",
      "Bash(powershell.exe:*)",
      "Bash(./.claude/tools/orchestrator-role-aware show-role:*)",
      "Bash(./.claude/tools/orchestrator-role-aware log:*)",
      "Bash(docker rmi:*)",
      "Bash(./.claude/tools/check-current-hat:*)",
      "Bash(docker-compose:*)",
      "Bash(./.claude/tools/orchestrator-session-start:*)",
      "Bash(tee:*)",
      "Bash(./mvnw.cmd test:*)",
      "Bash(mvn test:*)",
      "Bash(mvn clean test:*)",
      "Bash(mvn clean:*)",
      "Bash(TOKEN=\"eyJhbGciOiJIUzI1NiJ9.eyJjaGFpbktleSI6IlNFRUQwMDAwMDAwMSIsInR5cGUiOiJhY2Nlc3MiLCJzdWIiOiJhMDAwMDAwMC0wMDAwLTAwMDAtMDAwMC0wMDAwMDAwMDAwMDEiLCJpYXQiOjE3NjAyNDM2OTYsImV4cCI6MTc2MDI0NzI5Nn0.hx3Rc0zA43MqMDs8p252CSdSgQX_0TK-3FVFhRzLLWo\")",
      "Bash(mvnw.cmd clean:*)",
      "Bash(TOKEN=\"eyJhbGciOiJIUzI1NiJ9.eyJjaGFpbktleSI6IlNFRUQwMDAwMDAwMSIsInR5cGUiOiJhY2Nlc3MiLCJzdWIiOiJhMDAwMDAwMC0wMDAwLTAwMDAtMDAwMC0wMDAwMDAwMDAwMDEiLCJpYXQiOjE3NjAyNjg2OTcsImV4cCI6MTc2MDI3MjI5N30.XE3Psqi_3Omx5BEugT81I4-TOKGFtctB6glg_Gw4iLo\")",
      "Bash(mvn:*)",
      "Bash(if not exist assets mkdir assets)",
      "Bash(Select-String -Pattern \"testcontainers|postgres|HikariPool|Creating container\" -Context 0,2)",
      "Bash(Select-String -Pattern \"Tests run:|BUILD SUCCESS|BUILD FAILURE\")",
      "Bash(Select-Object -Last 5)",
      "Bash(docker volume:*)",
      "Bash(TOKEN=\"eyJhbGciOiJIUzI1NiJ9.eyJjaGFpbktleSI6IlNFRUQwMDAwMDAwMSIsInR5cGUiOiJhY2Nlc3MiLCJzdWIiOiJhMDAwMDAwMC0wMDAwLTAwMDAtMDAwMC0wMDAwMDAwMDAwMDEiLCJpYXQiOjE3NjA5OTA4NjUsImV4cCI6MTc2MDk5NDQ2NX0.-xgw1QJD4I9bY6FuioJK33UkAGwwoZ_bl3XK-9zTfVc\")",
      "Bash(TOKEN=\"eyJhbGciOiJIUzI1NiJ9.eyJjaGFpbktleSI6IlVTRVIwMDAwMDAwMiIsInR5cGUiOiJhY2Nlc3MiLCJzdWIiOiJiMDAwMDAwMC0wMDAwLTAwMDAtMDAwMC0wMDAwMDAwMDAwMDIiLCJpYXQiOjE3NjA5OTEzMjAsImV4cCI6MTc2MDk5NDkyMH0.UVLH0WdbovXLT31vjg-zqRG66VwTCOy9o6H9qiP-6Ds\")",
      "Bash(nc localhost 33587)",
      "Bash(TOKEN=\"eyJhbGciOiJIUzI1NiJ9.eyJjaGFpbktleSI6IlNFRUQwMDAwMDAwMSIsInR5cGUiOiJhY2Nlc3MiLCJzdWIiOiJhMDAwMDAwMC0wMDAwLTAwMDAtMDAwMC0wMDAwMDAwMDAwMDEiLCJpYXQiOjE3NjEwMDY4NDIsImV4cCI6MTc2MTAxMDQ0Mn0.qIJCSueON4RkWLLU0AqA42Px_fsydxiJSc480Kc0l7s\")",
      "Bash(git restore:*)",
      "Bash(docker system prune:*)",
      "Bash(start http://localhost:3001)",
      "Bash(open http://localhost:3001)",
      "Bash(xdg-open:*)",
      "Bash(TOKEN=\"eyJhbGciOiJIUzI1NiJ9.eyJjaGFpbktleSI6IlNFRUQwMDAwMDAwMSIsInR5cGUiOiJhY2Nlc3MiLCJzdWIiOiJhMDAwMDAwMC0wMDAwLTAwMDAtMDAwMC0wMDAwMDAwMDAwMDEiLCJpYXQiOjE3NjEwODU2MDAsImV4cCI6MTc2MTA4OTIwMH0.Z8wbWfNIz6Xfh4VJ0M91c2UslgS0pwSYF_MAR-1TwEE\" curl -s -X GET http://localhost:8080/api/v1/dashboard -H \"Authorization: Bearer $TOKEN\")",
      "Bash(docker restart:*)",
      "Bash(docker images:*)",
      "Bash(xcopy:*)",
      "Bash(TOKEN=\"eyJhbGciOiJIUzI1NiJ9.eyJjaGFpbktleSI6IlNFRUQwMDAwMDAwMSIsInR5cGUiOiJhY2Nlc3MiLCJzdWIiOiJhMDAwMDAwMC0wMDAwLTAwMDAtMDAwMC0wMDAwMDAwMDAwMDEiLCJpYXQiOjE3NjE3NzM2OTUsImV4cCI6MTc2MTc3NzI5NX0.FEYtQqaU0Xt2hx8R3r3DwTLcsfy57mHrPDL6g8QWvxw\")",
      "Bash(Select-String -Pattern \"error -\")",
      "Bash(Select-Object -First 10)",
      "Bash(TOKEN=\"eyJhbGciOiJIUzI1NiJ9.eyJjaGFpbktleSI6IlNFRUQwMDAwMDAwMSIsInR5cGUiOiJhY2Nlc3MiLCJzdWIiOiJhMDAwMDAwMC0wMDAwLTAwMDAtMDAwMC0wMDAwMDAwMDAwMDEiLCJpYXQiOjE3NjE3NzgwODAsImV4cCI6MTc2MTc4MTY4MH0.zmCBdq4Fb2sRrhQddJhB3tS0vtrmbyGajghTDxJ2xn8\")"
    ],
    "deny": [],
    "ask": []
  },
  "outputStyle": "Explanatory"
}
