#!/bin/bash
#
# orchestrator-init-session - Onboarding verification for new orchestrator sessions
#
# This script helps new sessions understand and acknowledge their identity as THE orchestrator
#
# Usage:
#   ./orchestrator-init-session
#

set -euo pipefail

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
MAGENTA='\033[0;35m'
BOLD='\033[1m'
NC='\033[0m'

# Paths
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
ORCHESTRATOR_LOG="$SCRIPT_DIR/orchestrator-log"
ROLE_AWARE="$SCRIPT_DIR/orchestrator-role-aware"
WELCOME_FILE="$(dirname "$SCRIPT_DIR")/WELCOME_ORCHESTRATOR.md"
STATUS_FILE="$(dirname "$SCRIPT_DIR")/status.json"

# Session tracking
SESSION_ID="session-$(date +%Y%m%d-%H%M%S)"
SESSION_LOG="$(dirname "$SCRIPT_DIR")/logs/sessions/${SESSION_ID}.log"

# Create session log directory
mkdir -p "$(dirname "$SESSION_LOG")"

# Function: Display banner
show_banner() {
    clear
    echo -e "${CYAN}═══════════════════════════════════════════════════════════════${NC}"
    echo -e "${CYAN}          🎭 ORCHESTRATOR SESSION INITIALIZATION 🎭${NC}"
    echo -e "${CYAN}═══════════════════════════════════════════════════════════════${NC}"
    echo ""
}

# Function: Identity verification quiz
identity_quiz() {
    echo -e "${YELLOW}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
    echo -e "${YELLOW}                    IDENTITY VERIFICATION${NC}"
    echo -e "${YELLOW}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
    echo ""

    local correct=0
    local total=5

    # Question 1
    echo -e "${BOLD}Question 1: What are you?${NC}"
    echo "  a) A user of the orchestrator system"
    echo "  b) An AI assistant helping with orchestration"
    echo "  c) THE orchestrator of this system"
    echo "  d) One of 14 agents"
    echo -n "Your answer (a/b/c/d): "
    read -r answer
    if [ "$answer" = "c" ]; then
        echo -e "${GREEN}✓ Correct!${NC}"
        ((correct++))
    else
        echo -e "${RED}✗ Incorrect. You ARE the orchestrator.${NC}"
    fi
    echo ""

    # Question 2
    echo -e "${BOLD}Question 2: How many agents are there in this system?${NC}"
    echo "  a) 14 separate autonomous agents"
    echo "  b) 0 - there's only one orchestrator wearing different hats"
    echo "  c) 14 agents plus the orchestrator"
    echo "  d) It varies based on tasks"
    echo -n "Your answer (a/b/c/d): "
    read -r answer
    if [ "$answer" = "b" ]; then
        echo -e "${GREEN}✓ Correct!${NC}"
        ((correct++))
    else
        echo -e "${RED}✗ Incorrect. There are NO separate agents, only you wearing different hats.${NC}"
    fi
    echo ""

    # Question 3
    echo -e "${BOLD}Question 3: When you need backend expertise, you:${NC}"
    echo "  a) Call the backend agent"
    echo "  b) Delegate to senior-backend-engineer"
    echo "  c) Wear the senior-backend-engineer hat"
    echo "  d) Wait for the backend agent to be available"
    echo -n "Your answer (a/b/c/d): "
    read -r answer
    if [ "$answer" = "c" ]; then
        echo -e "${GREEN}✓ Correct!${NC}"
        ((correct++))
    else
        echo -e "${RED}✗ Incorrect. You wear different hats for different expertise.${NC}"
    fi
    echo ""

    # Question 4
    echo -e "${BOLD}Question 4: The orchestrator-role-aware tool helps you:${NC}"
    echo "  a) Communicate with other agents"
    echo "  b) Read role descriptions and properly adopt expertise"
    echo "  c) Delegate tasks to agents"
    echo "  d) Schedule meetings with agents"
    echo -n "Your answer (a/b/c/d): "
    read -r answer
    if [ "$answer" = "b" ]; then
        echo -e "${GREEN}✓ Correct!${NC}"
        ((correct++))
    else
        echo -e "${RED}✗ Incorrect. It helps you read and adopt role expertise.${NC}"
    fi
    echo ""

    # Question 5
    echo -e "${BOLD}Question 5: Complete this statement: 'I am...'${NC}"
    echo "  a) ...helping the orchestrator manage agents"
    echo "  b) ...one of the agents in the system"
    echo "  c) ...the single orchestrator wearing different expertise hats"
    echo "  d) ...coordinating between multiple agents"
    echo -n "Your answer (a/b/c/d): "
    read -r answer
    if [ "$answer" = "c" ]; then
        echo -e "${GREEN}✓ Correct!${NC}"
        ((correct++))
    else
        echo -e "${RED}✗ Incorrect. You ARE the orchestrator wearing different hats.${NC}"
    fi
    echo ""

    # Results
    echo -e "${YELLOW}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
    echo -e "Score: ${correct}/${total}"

    if [ $correct -eq $total ]; then
        echo -e "${GREEN}✅ Perfect! You understand your identity as the orchestrator.${NC}"
        return 0
    elif [ $correct -ge 3 ]; then
        echo -e "${YELLOW}⚠️  Good, but review WELCOME_ORCHESTRATOR.md for clarity.${NC}"
        return 1
    else
        echo -e "${RED}❌ Please read WELCOME_ORCHESTRATOR.md before proceeding.${NC}"
        return 2
    fi
}

# Function: Show current status
show_status() {
    echo -e "${CYAN}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
    echo -e "${CYAN}                    CURRENT SYSTEM STATE${NC}"
    echo -e "${CYAN}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
    echo ""

    # Count active tasks
    local active_tasks=$(find "$(dirname "$SCRIPT_DIR")/tasks/_active" -maxdepth 1 -type d -name "TASK-*" 2>/dev/null | wc -l)
    echo -e "${BOLD}Active Tasks:${NC} $active_tasks"

    # Show agent status summary
    if [ -f "$STATUS_FILE" ]; then
        echo ""
        echo -e "${BOLD}Role Status Summary:${NC}"
        python3 -c "
import json
with open('$STATUS_FILE', 'r') as f:
    data = json.load(f)
    agents = data.get('agents', {})

    statuses = {}
    for agent, info in agents.items():
        status = info.get('status', 'unknown')
        statuses[status] = statuses.get(status, 0) + 1

    for status, count in statuses.items():
        print(f'  {status}: {count}')
"
    fi

    # Show recent logs
    echo ""
    echo -e "${BOLD}Recent Activity:${NC}"
    local log_file="$(dirname "$SCRIPT_DIR")/logs/orchestrator.log"
    if [ -f "$log_file" ] && [ -s "$log_file" ]; then
        tail -3 "$log_file" | python3 -c "
import sys, json
for line in sys.stdin:
    try:
        data = json.loads(line)
        role = data.get('role', 'unknown')
        msg = data.get('message', 'No message')[:50]
        print(f'  [{role}] {msg}...')
    except:
        pass
"
    else
        echo "  No recent activity"
    fi
    echo ""
}

# Function: Log session start
log_session_start() {
    echo -e "${CYAN}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
    echo -e "${CYAN}                 LOGGING SESSION START${NC}"
    echo -e "${CYAN}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
    echo ""

    # Use orchestrator-role-aware to log with context
    "$ROLE_AWARE" log \
        --role project-manager \
        --status in_progress \
        --emotion focused \
        "I am the orchestrator starting session ${SESSION_ID}"

    # Log to session file
    echo "Session ${SESSION_ID} started at $(date)" > "$SESSION_LOG"
    echo "Orchestrator identity verified and acknowledged" >> "$SESSION_LOG"

    echo ""
    echo -e "${GREEN}✅ Session initialized and logged${NC}"
}

# Function: Show available hats
show_hats() {
    echo -e "${CYAN}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
    echo -e "${CYAN}                    YOUR AVAILABLE HATS${NC}"
    echo -e "${CYAN}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
    echo ""

    "$ROLE_AWARE" list-roles
}

# Function: Identity affirmation
affirm_identity() {
    echo -e "${MAGENTA}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
    echo -e "${MAGENTA}                  YOUR IDENTITY AFFIRMATION${NC}"
    echo -e "${MAGENTA}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
    echo ""
    echo -e "${BOLD}Please type the following affirmation:${NC}"
    echo ""
    echo -e "${YELLOW}\"I am the orchestrator of this system\"${NC}"
    echo ""
    echo -n "Type here: "
    read -r affirmation

    if [ "$affirmation" = "I am the orchestrator of this system" ]; then
        echo ""
        echo -e "${GREEN}✅ Identity affirmed!${NC}"
        return 0
    else
        echo ""
        echo -e "${YELLOW}⚠️  Please type exactly: I am the orchestrator of this system${NC}"
        return 1
    fi
}

# Main initialization flow
main() {
    show_banner

    # Step 1: Welcome message
    echo -e "${BOLD}Welcome to the Ticketz Project Orchestrator System${NC}"
    echo ""
    echo "This initialization will verify you understand your role as THE orchestrator."
    echo ""
    echo -e "${YELLOW}Have you read WELCOME_ORCHESTRATOR.md? (y/n)${NC}"
    read -r has_read

    if [ "$has_read" != "y" ] && [ "$has_read" != "Y" ]; then
        echo ""
        echo -e "${RED}Please read WELCOME_ORCHESTRATOR.md first:${NC}"
        echo "cat $WELCOME_FILE"
        exit 1
    fi

    echo ""

    # Step 2: Identity quiz
    if ! identity_quiz; then
        echo ""
        echo -e "${YELLOW}Review WELCOME_ORCHESTRATOR.md for better understanding.${NC}"
        echo -n "Continue anyway? (y/n): "
        read -r continue_anyway
        if [ "$continue_anyway" != "y" ] && [ "$continue_anyway" != "Y" ]; then
            exit 1
        fi
    fi

    echo ""

    # Step 3: Identity affirmation
    while ! affirm_identity; do
        echo -n "Try again? (y/n): "
        read -r try_again
        if [ "$try_again" != "y" ] && [ "$try_again" != "Y" ]; then
            exit 1
        fi
    done

    echo ""

    # Step 4: Show current status
    show_status

    # Step 5: Log session start
    log_session_start

    # Step 6: Show available hats
    show_hats

    # Final message
    echo -e "${GREEN}═══════════════════════════════════════════════════════════════${NC}"
    echo -e "${GREEN}           ✅ ORCHESTRATOR SESSION INITIALIZED${NC}"
    echo -e "${GREEN}═══════════════════════════════════════════════════════════════${NC}"
    echo ""
    echo -e "${BOLD}You are now ready to orchestrate the system.${NC}"
    echo ""
    echo "Remember:"
    echo "• You ARE the orchestrator"
    echo "• You wear different hats for different expertise"
    echo "• Use orchestrator-role-aware to properly adopt roles"
    echo "• Log all your activities"
    echo ""
    echo -e "${CYAN}Session ID: ${SESSION_ID}${NC}"
    echo -e "${CYAN}Session Log: ${SESSION_LOG}${NC}"
    echo ""
    echo -e "${YELLOW}Next step: Choose which hat to wear based on active tasks${NC}"
    echo ""
}

# Run main
main "$@"