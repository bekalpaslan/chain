#!/bin/bash
#
# orchestrator - Unified orchestrator management tool
#
# This is the main tool for managing the orchestrator-centric architecture.
# It combines logging, status updates, and health monitoring in one place.
#
# Usage:
#   orchestrator <command> [options]
#
# Commands:
#   log         Log orchestrator activity (wearing agent hat)
#   status      Show current agent statuses
#   health      Generate project health metrics
#   init        Initialize all agents
#   help        Show this help message
#
# Examples:
#   orchestrator log --role backend --status in_progress "Starting API implementation"
#   orchestrator status
#   orchestrator health
#   orchestrator init
#

set -euo pipefail

# Color codes
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Paths
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
ORCHESTRATOR_LOG="$SCRIPT_DIR/orchestrator-log"
HEALTH_GENERATOR="$SCRIPT_DIR/generate-project-health.ps1"
STATUS_FILE="$(dirname "$SCRIPT_DIR")/status.json"
LOGS_DIR="$(dirname "$SCRIPT_DIR")/logs"

# Function: Show help
show_help() {
    echo -e "${CYAN}═══════════════════════════════════════════════════════${NC}"
    echo -e "${CYAN}   Orchestrator Management Tool${NC}"
    echo -e "${CYAN}═══════════════════════════════════════════════════════${NC}"
    echo ""
    echo "Usage: orchestrator <command> [options]"
    echo ""
    echo "Commands:"
    echo "  log         Log orchestrator activity (wearing agent hat)"
    echo "  status      Show current agent statuses"
    echo "  health      Generate project health metrics"
    echo "  init        Initialize all agents"
    echo "  help        Show this help message"
    echo ""
    echo "Logging Options (orchestrator log):"
    echo "  --role ROLE           Agent role being adopted"
    echo "  --status STATUS       idle|in_progress|blocked|done"
    echo "  --emotion EMOTION     happy|sad|frustrated|satisfied|neutral|focused"
    echo "  --task TASK_ID        Task ID (e.g., TASK-003)"
    echo "  --delegation          Flag for delegation to external agent"
    echo "  --delegated-to AGENT  Agent name when delegating"
    echo ""
    echo "Examples:"
    echo "  orchestrator log --role backend --status in_progress \"Starting API\""
    echo "  orchestrator status"
    echo "  orchestrator health"
    echo ""
}

# Function: Pass through to orchestrator-log
cmd_log() {
    if [ ! -x "$ORCHESTRATOR_LOG" ]; then
        echo -e "${RED}Error: orchestrator-log not found or not executable${NC}" >&2
        exit 1
    fi
    "$ORCHESTRATOR_LOG" "$@"
}

# Function: Show status
cmd_status() {
    echo -e "${CYAN}═══════════════════════════════════════════════════════${NC}"
    echo -e "${CYAN}   Agent Status Dashboard${NC}"
    echo -e "${CYAN}═══════════════════════════════════════════════════════${NC}"
    echo ""

    if [ ! -f "$STATUS_FILE" ]; then
        echo -e "${RED}Error: status.json not found${NC}" >&2
        exit 1
    fi

    # Parse status.json using Python (cross-platform)
    python3 -c "
import json
import sys
from datetime import datetime

with open('$STATUS_FILE', 'r') as f:
    data = json.load(f)

# Color codes
colors = {
    'idle': '\033[90m',      # Gray
    'in_progress': '\033[32m', # Green
    'working': '\033[32m',     # Green
    'blocked': '\033[31m',     # Red
    'done': '\033[34m'         # Blue
}
NC = '\033[0m'

# Emotion emojis
emojis = {
    'happy': '😊',
    'sad': '😢',
    'frustrated': '😤',
    'satisfied': '😌',
    'neutral': '😐',
    'focused': '🎯'
}

print('Agent Statuses:')
print('-' * 60)

agents = data.get('agents', {})
for agent_name, agent_data in agents.items():
    status = agent_data.get('status', 'unknown')
    emotion = agent_data.get('emotion', 'neutral')
    task = agent_data.get('current_task', {})
    color = colors.get(status, '\033[0m')
    emoji = emojis.get(emotion, '😐')

    # Format agent name (25 chars)
    formatted_name = agent_name.replace('-', ' ').title()[:25].ljust(25)

    # Format status (12 chars)
    formatted_status = f'{color}{status}{NC}'.ljust(12 + len(color) + len(NC))

    # Task info
    task_info = ''
    if task and isinstance(task, dict) and task.get('id'):
        task_info = f' [{task.get(\"id\")}]'

    print(f'  {formatted_name} {formatted_status} {emoji} {task_info}')

print('')
print('Summary:')
active = sum(1 for a in agents.values() if a.get('status') in ['in_progress', 'working'])
blocked = sum(1 for a in agents.values() if a.get('status') == 'blocked')
idle = sum(1 for a in agents.values() if a.get('status') in ['idle', 'done'])
print(f'  Active: {active}  |  Blocked: {blocked}  |  Idle: {idle}')
"
}

# Function: Generate health
cmd_health() {
    echo -e "${CYAN}Generating project health metrics...${NC}"

    if [ ! -f "$HEALTH_GENERATOR" ]; then
        echo -e "${RED}Error: generate-project-health.ps1 not found${NC}" >&2
        exit 1
    fi

    # Check for PowerShell
    if command -v powershell.exe &> /dev/null; then
        powershell.exe -ExecutionPolicy Bypass -File "$HEALTH_GENERATOR" -Verbose
    elif command -v pwsh &> /dev/null; then
        pwsh -ExecutionPolicy Bypass -File "$HEALTH_GENERATOR" -Verbose
    else
        echo -e "${RED}Error: PowerShell not found${NC}" >&2
        echo "Install PowerShell Core: https://github.com/PowerShell/PowerShell"
        exit 1
    fi
}

# Function: Initialize all agents
cmd_init() {
    echo -e "${CYAN}Initializing all 14 agents...${NC}"
    echo ""

    # List of all agents with their descriptions
    declare -A agents=(
        ["project-manager"]="Ready to manage project tasks, priorities, and resource allocation"
        ["solution-architect"]="Ready to design enterprise architecture and system patterns"
        ["senior-backend-engineer"]="Ready to implement Java/Spring Boot services and REST APIs"
        ["principal-database-architect"]="Ready to design data architecture and optimize queries"
        ["test-master"]="Ready to create comprehensive test suites and ensure quality"
        ["devops-lead"]="Ready to manage CI/CD pipelines and infrastructure automation"
        ["ui-designer"]="Ready to create intuitive, accessible user interfaces"
        ["web-dev-master"]="Ready to build responsive React web applications"
        ["senior-mobile-developer"]="Ready to develop cross-platform Flutter applications"
        ["scrum-master"]="Ready to facilitate agile processes and remove impediments"
        ["opportunist-strategist"]="Ready to analyze market opportunities and competitive landscape"
        ["psychologist-game-dynamics"]="Ready to design engagement and gamification strategies"
        ["game-theory-master"]="Ready to model strategic behavior and pricing strategies"
        ["legal-software-advisor"]="Ready to ensure compliance and manage licensing requirements"
    )

    # Initialize each agent
    for agent in "${!agents[@]}"; do
        message="${agents[$agent]}"
        "$ORCHESTRATOR_LOG" --role "$agent" --status idle --emotion neutral "Agent initialized. $message"
        echo -e "${GREEN}✓${NC} Initialized: $agent"
    done

    echo ""
    echo -e "${GREEN}✅ All 14 agents initialized successfully!${NC}"
}

# Main command dispatcher
main() {
    if [ $# -eq 0 ]; then
        show_help
        exit 0
    fi

    command="$1"
    shift

    case "$command" in
        log)
            cmd_log "$@"
            ;;
        status)
            cmd_status "$@"
            ;;
        health)
            cmd_health "$@"
            ;;
        init)
            cmd_init "$@"
            ;;
        help|--help|-h)
            show_help
            ;;
        *)
            echo -e "${RED}Error: Unknown command '$command'${NC}" >&2
            echo "Run 'orchestrator help' for usage information" >&2
            exit 1
            ;;
    esac
}

main "$@"