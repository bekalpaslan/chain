#!/bin/bash
#
# orchestrator-log - Orchestrator-centric logging tool
#
# The orchestrator is the single entity performing all work. This tool logs
# orchestrator activities when "wearing different hats" (agent roles) or
# delegating work to external agents via the Task tool.
#
# Usage:
#   orchestrator-log [OPTIONS] "message"
#
# Options:
#   --role ROLE           Agent role being adopted (e.g., senior-backend-engineer)
#   --delegation          Flag: this is a delegation to external agent
#   --delegated-to AGENT  Agent name when delegating
#   --status STATUS       Status: idle|in_progress|blocked|done (default: in_progress)
#   --emotion EMOTION     Emotion: happy|sad|frustrated|satisfied|neutral|focused (default: neutral)
#   --task TASK_ID        Task ID (e.g., TASK-003)
#   --phase PHASE         Current phase/milestone
#   --risk RISK           Risk level: low|medium|high|critical
#   --affected AGENTS     Comma-separated list of affected agents
#
# Examples:
#   orchestrator-log --role senior-backend-engineer --status in_progress --emotion focused --task TASK-003 "Starting JWT implementation"
#   orchestrator-log --delegation --delegated-to test-master --task TASK-004 "Delegating test suite creation"
#   orchestrator-log --role ui-designer --status done --emotion satisfied --task TASK-012 "Design mockups complete"
#

set -euo pipefail

# Default values
ROLE=""
DELEGATION=false
DELEGATED_TO=""
STATUS="in_progress"
EMOTION="neutral"
TASK=""
PHASE=""
RISK=""
AFFECTED_AGENTS=""
MESSAGE=""

# Color codes for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Parse arguments
while [[ $# -gt 0 ]]; do
  case $1 in
    --role)
      ROLE="$2"
      shift 2
      ;;
    --delegation)
      DELEGATION=true
      shift
      ;;
    --delegated-to)
      DELEGATED_TO="$2"
      shift 2
      ;;
    --status)
      STATUS="$2"
      shift 2
      ;;
    --emotion)
      EMOTION="$2"
      shift 2
      ;;
    --task)
      TASK="$2"
      shift 2
      ;;
    --phase)
      PHASE="$2"
      shift 2
      ;;
    --risk)
      RISK="$2"
      shift 2
      ;;
    --affected)
      AFFECTED_AGENTS="$2"
      shift 2
      ;;
    -h|--help)
      head -n 30 "$0" | grep "^#" | sed 's/^# \?//'
      exit 0
      ;;
    *)
      MESSAGE="$1"
      shift
      ;;
  esac
done

# Validation
if [ -z "$MESSAGE" ]; then
  echo -e "${RED}Error: Message is required${NC}" >&2
  echo "Usage: orchestrator-log [OPTIONS] \"message\"" >&2
  echo "Run with --help for full usage" >&2
  exit 1
fi

# Validate status
VALID_STATUSES=("idle" "in_progress" "working" "blocked" "done")
if [[ ! " ${VALID_STATUSES[@]} " =~ " ${STATUS} " ]]; then
  echo -e "${RED}Error: Invalid status '$STATUS'${NC}" >&2
  echo "Valid: idle, in_progress, working, blocked, done" >&2
  exit 1
fi

# Validate emotion
VALID_EMOTIONS=("happy" "sad" "frustrated" "satisfied" "neutral" "focused")
if [[ ! " ${VALID_EMOTIONS[@]} " =~ " ${EMOTION} " ]]; then
  echo -e "${RED}Error: Invalid emotion '$EMOTION'${NC}" >&2
  echo "Valid: happy, sad, frustrated, satisfied, neutral, focused" >&2
  exit 1
fi

# Validate delegation logic
if [ "$DELEGATION" = true ] && [ -z "$DELEGATED_TO" ]; then
  echo -e "${RED}Error: --delegated-to required when using --delegation${NC}" >&2
  exit 1
fi

# Get timestamp in UTC (ISO 8601 format, seconds only)
if command -v date &> /dev/null; then
  # Linux/Mac
  TIMESTAMP=$(date -u +"%Y-%m-%dT%H:%M:%SZ" 2>/dev/null || date -u +"%Y-%m-%dT%H:%M:%S.000Z" | sed 's/\.[0-9]*Z/Z/')
else
  # Fallback
  TIMESTAMP=$(date +"%Y-%m-%dT%H:%M:%SZ")
fi

# Build JSON entry
JSON_ENTRY="{"
JSON_ENTRY+="\"timestamp\":\"$TIMESTAMP\","
JSON_ENTRY+="\"logger\":\"orchestrator\","

if [ -n "$ROLE" ]; then
  JSON_ENTRY+="\"role\":\"$ROLE\","
else
  JSON_ENTRY+="\"role\":null,"
fi

JSON_ENTRY+="\"delegation\":$DELEGATION,"

if [ -n "$DELEGATED_TO" ]; then
  JSON_ENTRY+="\"delegated_to\":\"$DELEGATED_TO\","
fi

JSON_ENTRY+="\"status\":\"$STATUS\","
JSON_ENTRY+="\"emotion\":\"$EMOTION\","

if [ -n "$TASK" ]; then
  JSON_ENTRY+="\"task\":\"$TASK\","
fi

if [ -n "$PHASE" ]; then
  JSON_ENTRY+="\"phase\":\"$PHASE\","
fi

if [ -n "$RISK" ]; then
  JSON_ENTRY+="\"risk_level\":\"$RISK\","
fi

if [ -n "$AFFECTED_AGENTS" ]; then
  # Convert comma-separated string to JSON array
  IFS=',' read -ra AGENTS <<< "$AFFECTED_AGENTS"
  JSON_ARRAY="["
  for i in "${!AGENTS[@]}"; do
    [ $i -gt 0 ] && JSON_ARRAY+=","
    JSON_ARRAY+="\"${AGENTS[$i]}\""
  done
  JSON_ARRAY+="]"
  JSON_ENTRY+="\"affected_agents\":$JSON_ARRAY,"
fi

# Escape message for JSON (handle quotes and backslashes)
ESCAPED_MESSAGE=$(echo "$MESSAGE" | sed 's/\\/\\\\/g' | sed 's/"/\\"/g')
JSON_ENTRY+="\"message\":\"$ESCAPED_MESSAGE\""
JSON_ENTRY+="}"

# Ensure .claude/logs directory exists
mkdir -p .claude/logs

# 1. Append to main orchestrator log
echo "$JSON_ENTRY" >> .claude/logs/orchestrator.log

# 2. If wearing a role, also log to role-specific file
if [ -n "$ROLE" ] && [ "$ROLE" != "null" ]; then
  mkdir -p .claude/logs/orchestrator-roles
  echo "$JSON_ENTRY" >> ".claude/logs/orchestrator-roles/as-${ROLE}.log"
fi

# 3. If delegation, also log to delegations.log
if [ "$DELEGATION" = true ]; then
  echo "$JSON_ENTRY" >> .claude/logs/delegations.log
fi

# 4. If task specified, also log to task-specific log
if [ -n "$TASK" ]; then
  # Find task folder (could be in _active, _blocked, or _completed)
  TASK_FOLDER=""
  if [ -d ".claude/tasks/_active/${TASK}"* ]; then
    TASK_FOLDER=$(find .claude/tasks/_active -maxdepth 1 -type d -name "${TASK}*" | head -n 1)
  elif [ -d ".claude/tasks/_blocked/${TASK}"* ]; then
    TASK_FOLDER=$(find .claude/tasks/_blocked -maxdepth 1 -type d -name "${TASK}*" | head -n 1)
  fi

  if [ -n "$TASK_FOLDER" ]; then
    mkdir -p "$TASK_FOLDER/logs"
    echo "$JSON_ENTRY" >> "$TASK_FOLDER/logs/orchestrator.jsonl"
  fi
fi

# 5. Update status.json if role specified (call PowerShell helper)
if [ -n "$ROLE" ] && [ "$ROLE" != "null" ] && [ -f ".claude/tools/update-status-for-role.ps1" ]; then
  # Check if we're on Windows (has powershell)
  if command -v powershell.exe &> /dev/null; then
    TASK_PARAM=""
    [ -n "$TASK" ] && TASK_PARAM="-Task \"$TASK\""
    powershell.exe -ExecutionPolicy Bypass -File .claude/tools/update-status-for-role.ps1 \
      -Role "$ROLE" \
      -Status "$STATUS" \
      -Emotion "$EMOTION" \
      $TASK_PARAM 2>/dev/null || true
  fi
fi

# Success output with emoji and color
if [ "$DELEGATION" = true ]; then
  echo -e "${BLUE}üì§ Delegation logged:${NC} $MESSAGE"
  echo -e "${BLUE}   ‚Üí Delegated to:${NC} $DELEGATED_TO"
elif [ -n "$ROLE" ]; then
  EMOJI="üé≠"
  case $STATUS in
    in_progress|working) EMOJI="‚öôÔ∏è" ;;
    blocked) EMOJI="üö´" ;;
    done) EMOJI="‚úÖ" ;;
    idle) EMOJI="‚è∏Ô∏è" ;;
  esac
  echo -e "${GREEN}${EMOJI} Logged as ${ROLE}:${NC} $MESSAGE"
  [ -n "$TASK" ] && echo -e "${GREEN}   ‚Üí Task:${NC} $TASK"
else
  echo -e "${GREEN}‚úÖ Logged:${NC} $MESSAGE"
fi

# Show compliance reminder for important actions
if [ "$STATUS" = "done" ] && [ -n "$TASK" ]; then
  echo -e "${YELLOW}üí° Tip: Run compliance check before closing task:${NC}"
  echo -e "   ${BLUE}./.claude/tools/check-orchestrator-compliance --task $TASK${NC}"
fi

exit 0
