#!/bin/bash
# Claude Agent Logging Compliance Checker
# Validates that all agents are following logging requirements
#
# Usage:
#   ./.claude/tools/check-compliance              # Check all agents
#   ./.claude/tools/check-compliance --agent ui-designer  # Check specific agent
#   ./.claude/tools/check-compliance --recent 2h   # Check only recent activity

set -e

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
BOLD='\033[1m'
NC='\033[0m'

# Find .claude directory
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
CLAUDE_DIR="$(dirname "$SCRIPT_DIR")"
LOGS_DIR="${CLAUDE_DIR}/logs"
STATUS_FILE="${CLAUDE_DIR}/status.json"

# Parse arguments
SPECIFIC_AGENT=""
TIME_WINDOW="24h"

while [[ $# -gt 0 ]]; do
    case $1 in
        --agent)
            SPECIFIC_AGENT="$2"
            shift 2
            ;;
        --recent)
            TIME_WINDOW="$2"
            shift 2
            ;;
        *)
            echo -e "${RED}Unknown option: $1${NC}"
            exit 1
            ;;
    esac
done

echo -e "${BOLD}${BLUE}╔══════════════════════════════════════════════════════════╗${NC}"
echo -e "${BOLD}${BLUE}║  Claude Agent Logging Compliance Check                  ║${NC}"
echo -e "${BOLD}${BLUE}╚══════════════════════════════════════════════════════════╝${NC}"
echo ""

# Counters
TOTAL_CHECKS=0
PASSED_CHECKS=0
WARNINGS=0
ERRORS=0

# Check 1: Verify status.json exists and is valid JSON
echo -e "${BOLD}[1/6] Checking status.json validity...${NC}"
TOTAL_CHECKS=$((TOTAL_CHECKS + 1))

if [ ! -f "$STATUS_FILE" ]; then
    echo -e "${RED}  ✗ FAIL: status.json not found${NC}"
    ERRORS=$((ERRORS + 1))
else
    if command -v jq &> /dev/null; then
        if jq empty "$STATUS_FILE" 2>/dev/null; then
            echo -e "${GREEN}  ✓ PASS: status.json is valid JSON${NC}"
            PASSED_CHECKS=$((PASSED_CHECKS + 1))
        else
            echo -e "${RED}  ✗ FAIL: status.json has invalid JSON syntax${NC}"
            ERRORS=$((ERRORS + 1))
        fi
    else
        echo -e "${YELLOW}  ⚠ SKIP: jq not installed, cannot validate JSON${NC}"
        WARNINGS=$((WARNINGS + 1))
    fi
fi

# Check 2: Verify all agents in status.json have corresponding log files
echo -e "${BOLD}[2/6] Checking agent log files exist...${NC}"
TOTAL_CHECKS=$((TOTAL_CHECKS + 1))

if [ -f "$STATUS_FILE" ] && command -v jq &> /dev/null; then
    AGENTS=$(jq -r '.agents | keys[]' "$STATUS_FILE" 2>/dev/null || echo "")
    MISSING_LOGS=0

    for agent in $AGENTS; do
        if [ -n "$SPECIFIC_AGENT" ] && [ "$agent" != "$SPECIFIC_AGENT" ]; then
            continue
        fi

        LOG_FILE="${LOGS_DIR}/${agent}.log"
        if [ ! -f "$LOG_FILE" ]; then
            echo -e "${YELLOW}  ⚠ WARNING: Agent '$agent' in status.json but no log file${NC}"
            MISSING_LOGS=$((MISSING_LOGS + 1))
        fi
    done

    if [ $MISSING_LOGS -eq 0 ]; then
        echo -e "${GREEN}  ✓ PASS: All agents have log files${NC}"
        PASSED_CHECKS=$((PASSED_CHECKS + 1))
    else
        echo -e "${YELLOW}  ⚠ WARNING: $MISSING_LOGS agents missing log files${NC}"
        WARNINGS=$((WARNINGS + 1))
    fi
else
    echo -e "${YELLOW}  ⚠ SKIP: Cannot check without status.json or jq${NC}"
fi

# Check 3: Validate timestamp format in recent log entries
echo -e "${BOLD}[3/6] Checking timestamp format compliance...${NC}"
TOTAL_CHECKS=$((TOTAL_CHECKS + 1))

TIMESTAMP_ERRORS=0
if [ -d "$LOGS_DIR" ]; then
    for log_file in "$LOGS_DIR"/*.log; do
        if [ ! -f "$log_file" ]; then
            continue
        fi

        agent_name=$(basename "$log_file" .log)
        if [ -n "$SPECIFIC_AGENT" ] && [ "$agent_name" != "$SPECIFIC_AGENT" ]; then
            continue
        fi

        # Check last 5 entries for correct timestamp format
        if command -v jq &> /dev/null; then
            LAST_ENTRIES=$(tail -5 "$log_file" 2>/dev/null || echo "")
            if [ -n "$LAST_ENTRIES" ]; then
                while IFS= read -r line; do
                    if [ -n "$line" ]; then
                        # Validate timestamp format: YYYY-MM-DDTHH:MM:SSZ (seconds only)
                        timestamp=$(echo "$line" | jq -r '.timestamp' 2>/dev/null || echo "")
                        if [ -n "$timestamp" ]; then
                            # Check format (should not have milliseconds)
                            if [[ ! "$timestamp" =~ ^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}Z$ ]]; then
                                echo -e "${YELLOW}  ⚠ WARNING: Agent '$agent_name' has incorrect timestamp format: $timestamp${NC}"
                                TIMESTAMP_ERRORS=$((TIMESTAMP_ERRORS + 1))
                            fi
                        fi
                    fi
                done <<< "$LAST_ENTRIES"
            fi
        fi
    done

    if [ $TIMESTAMP_ERRORS -eq 0 ]; then
        echo -e "${GREEN}  ✓ PASS: All timestamps use correct format (seconds only, UTC)${NC}"
        PASSED_CHECKS=$((PASSED_CHECKS + 1))
    else
        echo -e "${YELLOW}  ⚠ WARNING: Found $TIMESTAMP_ERRORS timestamp format issues${NC}"
        WARNINGS=$((WARNINGS + 1))
    fi
else
    echo -e "${YELLOW}  ⚠ SKIP: No logs directory found${NC}"
fi

# Check 4: Verify agents with in_progress status have recent log entries
echo -e "${BOLD}[4/6] Checking active agents have recent logs...${NC}"
TOTAL_CHECKS=$((TOTAL_CHECKS + 1))

STALE_AGENTS=0
if [ -f "$STATUS_FILE" ] && command -v jq &> /dev/null; then
    # Get current timestamp
    CURRENT_TIME=$(date -u +%s)
    TWO_HOURS_AGO=$((CURRENT_TIME - 7200))

    # Find agents with in_progress or working status
    ACTIVE_AGENTS=$(jq -r '.agents | to_entries[] | select(.value.status == "in_progress" or .value.status == "working") | .key' "$STATUS_FILE" 2>/dev/null || echo "")

    for agent in $ACTIVE_AGENTS; do
        if [ -n "$SPECIFIC_AGENT" ] && [ "$agent" != "$SPECIFIC_AGENT" ]; then
            continue
        fi

        LOG_FILE="${LOGS_DIR}/${agent}.log"
        if [ -f "$LOG_FILE" ]; then
            # Get last log entry timestamp
            LAST_ENTRY=$(tail -1 "$LOG_FILE" 2>/dev/null || echo "")
            if [ -n "$LAST_ENTRY" ]; then
                LAST_TIMESTAMP=$(echo "$LAST_ENTRY" | jq -r '.timestamp' 2>/dev/null || echo "")
                if [ -n "$LAST_TIMESTAMP" ]; then
                    # Convert to epoch (requires date command that supports -d flag)
                    if date -d "$LAST_TIMESTAMP" +%s &> /dev/null; then
                        LAST_TIME=$(date -d "$LAST_TIMESTAMP" +%s)
                        if [ $LAST_TIME -lt $TWO_HOURS_AGO ]; then
                            echo -e "${YELLOW}  ⚠ WARNING: Agent '$agent' is active but last log is >2h old${NC}"
                            STALE_AGENTS=$((STALE_AGENTS + 1))
                        fi
                    fi
                fi
            else
                echo -e "${YELLOW}  ⚠ WARNING: Agent '$agent' is active but has empty log file${NC}"
                STALE_AGENTS=$((STALE_AGENTS + 1))
            fi
        else
            echo -e "${RED}  ✗ FAIL: Agent '$agent' is active but has no log file${NC}"
            STALE_AGENTS=$((STALE_AGENTS + 1))
            ERRORS=$((ERRORS + 1))
        fi
    done

    if [ $STALE_AGENTS -eq 0 ]; then
        echo -e "${GREEN}  ✓ PASS: All active agents have recent log entries${NC}"
        PASSED_CHECKS=$((PASSED_CHECKS + 1))
    else
        echo -e "${YELLOW}  ⚠ WARNING: $STALE_AGENTS active agents have stale/missing logs${NC}"
        WARNINGS=$((WARNINGS + 1))
    fi
else
    echo -e "${YELLOW}  ⚠ SKIP: Cannot check without status.json or jq${NC}"
fi

# Check 5: Validate required fields in log entries
echo -e "${BOLD}[5/6] Checking required fields in log entries...${NC}"
TOTAL_CHECKS=$((TOTAL_CHECKS + 1))

FIELD_ERRORS=0
if [ -d "$LOGS_DIR" ] && command -v jq &> /dev/null; then
    for log_file in "$LOGS_DIR"/*.log; do
        if [ ! -f "$log_file" ]; then
            continue
        fi

        agent_name=$(basename "$log_file" .log)
        if [ -n "$SPECIFIC_AGENT" ] && [ "$agent_name" != "$SPECIFIC_AGENT" ]; then
            continue
        fi

        # Check last 3 entries for required fields
        LAST_ENTRIES=$(tail -3 "$log_file" 2>/dev/null || echo "")
        if [ -n "$LAST_ENTRIES" ]; then
            while IFS= read -r line; do
                if [ -n "$line" ]; then
                    # Check for required fields: timestamp, agent, status, emotion
                    MISSING_FIELDS=""

                    if ! echo "$line" | jq -e '.timestamp' &>/dev/null; then
                        MISSING_FIELDS="${MISSING_FIELDS}timestamp "
                    fi
                    if ! echo "$line" | jq -e '.agent' &>/dev/null; then
                        MISSING_FIELDS="${MISSING_FIELDS}agent "
                    fi
                    if ! echo "$line" | jq -e '.status' &>/dev/null; then
                        MISSING_FIELDS="${MISSING_FIELDS}status "
                    fi
                    if ! echo "$line" | jq -e '.emotion' &>/dev/null; then
                        MISSING_FIELDS="${MISSING_FIELDS}emotion "
                    fi

                    if [ -n "$MISSING_FIELDS" ]; then
                        echo -e "${YELLOW}  ⚠ WARNING: Agent '$agent_name' log missing fields: $MISSING_FIELDS${NC}"
                        FIELD_ERRORS=$((FIELD_ERRORS + 1))
                    fi
                fi
            done <<< "$LAST_ENTRIES"
        fi
    done

    if [ $FIELD_ERRORS -eq 0 ]; then
        echo -e "${GREEN}  ✓ PASS: All log entries have required fields${NC}"
        PASSED_CHECKS=$((PASSED_CHECKS + 1))
    else
        echo -e "${YELLOW}  ⚠ WARNING: Found $FIELD_ERRORS entries with missing fields${NC}"
        WARNINGS=$((WARNINGS + 1))
    fi
else
    echo -e "${YELLOW}  ⚠ SKIP: Cannot check without logs or jq${NC}"
fi

# Check 6: Validate emotion values are from allowed list
echo -e "${BOLD}[6/6] Checking emotion values are valid...${NC}"
TOTAL_CHECKS=$((TOTAL_CHECKS + 1))

ALLOWED_EMOTIONS="happy sad frustrated satisfied neutral focused"
EMOTION_ERRORS=0

if [ -d "$LOGS_DIR" ] && command -v jq &> /dev/null; then
    for log_file in "$LOGS_DIR"/*.log; do
        if [ ! -f "$log_file" ]; then
            continue
        fi

        agent_name=$(basename "$log_file" .log)
        if [ -n "$SPECIFIC_AGENT" ] && [ "$agent_name" != "$SPECIFIC_AGENT" ]; then
            continue
        fi

        # Check last 3 entries
        LAST_ENTRIES=$(tail -3 "$log_file" 2>/dev/null || echo "")
        if [ -n "$LAST_ENTRIES" ]; then
            while IFS= read -r line; do
                if [ -n "$line" ]; then
                    emotion=$(echo "$line" | jq -r '.emotion' 2>/dev/null || echo "")
                    if [ -n "$emotion" ] && [ "$emotion" != "null" ]; then
                        if ! echo "$ALLOWED_EMOTIONS" | grep -qw "$emotion"; then
                            echo -e "${YELLOW}  ⚠ WARNING: Agent '$agent_name' uses invalid emotion: '$emotion'${NC}"
                            echo -e "${YELLOW}    Allowed: $ALLOWED_EMOTIONS${NC}"
                            EMOTION_ERRORS=$((EMOTION_ERRORS + 1))
                        fi
                    fi
                fi
            done <<< "$LAST_ENTRIES"
        fi
    done

    if [ $EMOTION_ERRORS -eq 0 ]; then
        echo -e "${GREEN}  ✓ PASS: All emotion values are valid${NC}"
        PASSED_CHECKS=$((PASSED_CHECKS + 1))
    else
        echo -e "${YELLOW}  ⚠ WARNING: Found $EMOTION_ERRORS invalid emotion values${NC}"
        WARNINGS=$((WARNINGS + 1))
    fi
else
    echo -e "${YELLOW}  ⚠ SKIP: Cannot check without logs or jq${NC}"
fi

# Summary
echo ""
echo -e "${BOLD}${BLUE}╔══════════════════════════════════════════════════════════╗${NC}"
echo -e "${BOLD}${BLUE}║  Compliance Check Summary                                ║${NC}"
echo -e "${BOLD}${BLUE}╚══════════════════════════════════════════════════════════╝${NC}"
echo ""
echo -e "  ${BOLD}Total Checks:${NC} $TOTAL_CHECKS"
echo -e "  ${GREEN}${BOLD}Passed:${NC} $PASSED_CHECKS"
echo -e "  ${YELLOW}${BOLD}Warnings:${NC} $WARNINGS"
echo -e "  ${RED}${BOLD}Errors:${NC} $ERRORS"
echo ""

if [ $ERRORS -gt 0 ]; then
    echo -e "${RED}${BOLD}⚠️  COMPLIANCE CHECK FAILED${NC}"
    echo -e "${RED}Please fix the errors above before proceeding.${NC}"
    exit 1
elif [ $WARNINGS -gt 0 ]; then
    echo -e "${YELLOW}${BOLD}⚠️  COMPLIANCE CHECK PASSED WITH WARNINGS${NC}"
    echo -e "${YELLOW}Consider addressing the warnings above.${NC}"
    exit 0
else
    echo -e "${GREEN}${BOLD}✅  FULL COMPLIANCE ACHIEVED${NC}"
    echo -e "${GREEN}All agents are following logging requirements!${NC}"
    exit 0
fi
