version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: chain-postgres
    environment:
      POSTGRES_DB: ${DB_NAME:-chaindb}
      POSTGRES_USER: ${DB_USER:-chain_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-chain_pass}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-chain_user}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - chain-network

  redis:
    image: redis:7-alpine
    container_name: chain-redis
    command: redis-server --appendonly yes
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - chain-network

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: chain-backend
    environment:
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE:-docker}
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${DB_NAME:-chaindb}
      DB_USER: ${DB_USER:-chain_user}
      DB_PASSWORD: ${DB_PASSWORD:-chain_pass}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      JWT_SECRET: ${JWT_SECRET:-your-secret-key-change-this-in-production-minimum-256-bits}
      CORS_ALLOWED_ORIGINS: ${CORS_ALLOWED_ORIGINS:-http://localhost:3000,http://localhost:3001}
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:8080/api/v1/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - chain-network

  public-app:
    build:
      context: ./frontend/public-app
      dockerfile: Dockerfile
    container_name: chain-public-app
    environment:
      - API_BASE_URL=http://backend:8080
    ports:
      - "3000:80"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - chain-network

  private-app:
    build:
      context: ./frontend/private-app
      dockerfile: Dockerfile
    container_name: chain-private-app
    environment:
      - API_BASE_URL=http://backend:8080
    ports:
      - "3001:80"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - chain-network

networks:
  chain-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local