services:
  postgres:
    image: postgres:15-alpine
    container_name: chain-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=en_US.utf8"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '${POSTGRES_CPU_LIMIT:-1.0}'
          memory: ${POSTGRES_MEMORY_LIMIT:-512M}
        reservations:
          cpus: '0.25'
          memory: 256M
    networks:
      - chain-network

  redis:
    image: redis:7-alpine
    container_name: chain-redis
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru --requirepass ${REDIS_PASSWORD}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '${REDIS_CPU_LIMIT:-0.5}'
          memory: ${REDIS_MEMORY_LIMIT:-256M}
        reservations:
          cpus: '0.1'
          memory: 128M
    networks:
      - chain-network

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: chain-backend
    environment:
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE:-docker}
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      SPRING_DATA_REDIS_HOST: ${REDIS_HOST}
      SPRING_DATA_REDIS_PORT: ${REDIS_PORT}
      SPRING_DATA_REDIS_PASSWORD: ${REDIS_PASSWORD}
      JWT_SECRET: ${JWT_SECRET}
    ports:
      - "${BACKEND_PORT:-8080}:8080"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '${BACKEND_CPU_LIMIT:-2.0}'
          memory: ${BACKEND_MEMORY_LIMIT:-1G}
        reservations:
          cpus: '0.5'
          memory: 512M
    networks:
      - chain-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/api/v1/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  public-app:
    build:
      context: ./frontend
      dockerfile: public-app/Dockerfile
    container_name: chain-public-app
    ports:
      - "${PUBLIC_APP_PORT:-3000}:3000"
    environment:
      - API_BASE_URL=${API_BASE_URL:-http://backend:8080}
    depends_on:
      backend:
        condition: service_healthy
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '${FRONTEND_CPU_LIMIT:-0.5}'
          memory: ${FRONTEND_MEMORY_LIMIT:-256M}
        reservations:
          cpus: '0.1'
          memory: 64M
    networks:
      - chain-network

  private-app:
    build:
      context: ./frontend
      dockerfile: private-app/Dockerfile
    container_name: chain-private-app
    ports:
      - "${PRIVATE_APP_PORT:-3001}:3001"
    environment:
      - API_BASE_URL=${API_BASE_URL:-http://backend:8080}
    depends_on:
      backend:
        condition: service_healthy
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '${FRONTEND_CPU_LIMIT:-0.5}'
          memory: ${FRONTEND_MEMORY_LIMIT:-256M}
        reservations:
          cpus: '0.1'
          memory: 64M
    networks:
      - chain-network

  admin-dashboard:
    build:
      context: ./frontend/admin_dashboard
      dockerfile: Dockerfile
    container_name: chain-admin-dashboard
    ports:
      - "${ADMIN_DASHBOARD_PORT:-3002}:8080"
    environment:
      - API_BASE_URL=${API_BASE_URL:-http://backend:8080}
    volumes:
      - ./.claude/status.json:/usr/share/nginx/html/status.json:ro
    depends_on:
      backend:
        condition: service_healthy
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '${FRONTEND_CPU_LIMIT:-0.5}'
          memory: ${FRONTEND_MEMORY_LIMIT:-256M}
        reservations:
          cpus: '0.1'
          memory: 64M
    networks:
      - chain-network

networks:
  chain-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
