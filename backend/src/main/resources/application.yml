spring:
  application:
    name: chain-backend

  datasource:
    url: jdbc:postgresql://${DB_HOST:localhost}:${DB_PORT:5432}/${DB_NAME:chaindb}
    username: ${DB_USER:chain_user}
    password: ${DB_PASSWORD:chain_pass}
    driver-class-name: org.postgresql.Driver
    hikari:
      maximum-pool-size: 20
      minimum-idle: 5
      connection-timeout: 30000
      idle-timeout: 600000
      max-lifetime: 1800000

  jpa:
    hibernate:
      ddl-auto: validate
    show-sql: false
    open-in-view: false
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true
        use_sql_comments: true
        jdbc:
          batch_size: 20
        query:
          in_clause_parameter_padding: true
          fail_on_pagination_over_collection_fetch: true
          plan_cache_max_size: 2048
    defer-datasource-initialization: false

  flyway:
    enabled: true
    baseline-on-migrate: true
    locations: classpath:db/migration
    validate-on-migrate: true
    out-of-order: false
    table: flyway_schema_history

  redis:
    host: ${REDIS_HOST:localhost}
    port: ${REDIS_PORT:6379}
    password: ${REDIS_PASSWORD:}
    timeout: 2000ms
    lettuce:
      pool:
        max-active: 8
        max-idle: 8
        min-idle: 2

  cache:
    type: redis
    redis:
      time-to-live: 600000
      cache-null-values: false

server:
  port: 8080
  servlet:
    context-path: /api/v1
  compression:
    enabled: true
    mime-types: text/html,text/xml,text/plain,text/css,text/javascript,application/javascript,application/json,application/xml
    min-response-size: 1024

# CORS Configuration
cors:
  # Allowed origins - update for production deployment
  # Use CORS_ALLOWED_ORIGINS environment variable in production
  allowed-origins: ${CORS_ALLOWED_ORIGINS:http://localhost:3000,http://localhost:3001}

# JWT Configuration
jwt:
  secret: ${JWT_SECRET:your-secret-key-change-this-in-production-minimum-256-bits}
  access-token-expiration: 3600000 # 1 hour
  refresh-token-expiration: 2592000000 # 30 days

# Ticket Configuration
ticket:
  expiration-hours: 24
  cooldown-minutes: 10

# Rate Limiting
rate-limit:
  enabled: true
  registration:
    per-device: 3
    window-hours: 24
  ticket-generation:
    per-user: 1
    window-minutes: 10
  api:
    per-user: 100
    window-minutes: 1

logging:
  level:
    com.thechain: DEBUG
    org.springframework.web: INFO
    org.hibernate: INFO
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} - %msg%n"

# Actuator Configuration
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics
      base-path: /actuator
  endpoint:
    health:
      show-details: when-authorized
  health:
    redis:
      enabled: true
    db:
      enabled: true

# SpringDoc OpenAPI Configuration
springdoc:
  api-docs:
    path: /api-docs
    enabled: true
  swagger-ui:
    path: /swagger-ui.html
    enabled: true
    tags-sorter: alpha
    operations-sorter: alpha
    display-request-duration: true
    filter: true
    try-it-out-enabled: true
  show-actuator: false
  packages-to-scan: com.thechain.controller
  paths-to-match: /**
  default-consumes-media-type: application/json
  default-produces-media-type: application/json

---
# Docker Profile
spring:
  config:
    activate:
      on-profile: docker

  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true

logging:
  level:
    com.thechain: INFO
    org.springframework.web: WARN
